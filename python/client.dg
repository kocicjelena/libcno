import '/sys'
import '/ssl'
import '/asyncio'
import '/urllib/parse/urlparse'

import '/cloader'
import '/cno'


main = async $ url loop ->
  sctx = if url.scheme == 'https' => ssl.SSLContext ssl.PROTOCOL_TLSv1_2
            otherwise             => None
  port = if url.port              => url.port
            url.scheme == 'https' => 443
            otherwise             => 80
  sctx =>
    sctx.set_npn_protocols  ['h2', 'http/1.1']
    sctx.set_alpn_protocols ['h2', 'http/1.1']

  _, client = await loop.create_connection (-> cno.Client loop) url.hostname port ssl: sctx
  rsp = await client.request 'GET' url.path [(':scheme', url.scheme), (':authority', url.netloc)] b''
  print   '--' 'response:' rsp.code
  for (k, v) in rsp.headers =>
    print '  ' k v
  async for p in rsp.payload => print '++' 'payload:' (len p) 'bytes'
  async for (push, response) in rsp.pushed =>
    print '++' 'push promise: ' push.method push.path
    response = await response
    print '++' 'push response:' response.code


len sys.argv != 2 => exit $ 'usage: {0} <url>'.format *: sys.argv
loop = asyncio.get_event_loop!
loop.run_until_complete $ main (urlparse $ sys.argv !! 1) loop
